0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@3.10.10
3 info using node@v6.14.3
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: 'D:\\doron\\projects\\my\\react-common-admin',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory C:\Users\nahum\AppData\Roaming\npm-cache\react-common-admin\1.1.0\package.tgz not in flight; packing
9 verbose correctMkdir C:\Users\nahum\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
10 info lifecycle react-common-admin@1.1.0~prepublish: react-common-admin@1.1.0
11 silly lifecycle react-common-admin@1.1.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ 'C:\\Users\\nahum\\AppData\\Roaming\\npm-cache\\react-common-admin\\1.1.0\\package.tgz',
12 verbose tar pack   'D:\\doron\\projects\\my\\react-common-admin' ]
13 verbose tarball C:\Users\nahum\AppData\Roaming\npm-cache\react-common-admin\1.1.0\package.tgz
14 verbose folder D:\doron\projects\my\react-common-admin
15 verbose addLocalTarball adding from inside cache C:\Users\nahum\AppData\Roaming\npm-cache\react-common-admin\1.1.0\package.tgz
16 verbose correctMkdir C:\Users\nahum\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
17 silly cache afterAdd react-common-admin@1.1.0
18 verbose afterAdd C:\Users\nahum\AppData\Roaming\npm-cache\react-common-admin\1.1.0\package\package.json not in flight; writing
19 verbose correctMkdir C:\Users\nahum\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
20 verbose afterAdd C:\Users\nahum\AppData\Roaming\npm-cache\react-common-admin\1.1.0\package\package.json written
21 silly publish { name: 'react-common-admin',
21 silly publish   version: '1.1.0',
21 silly publish   description: 'A react page container that works with [react-parse](https://www.npmjs.com/package/react-parse)  to fetch data from server and display as table/gallery or customs component.',
21 silly publish   main: 'lib/index.js',
21 silly publish   scripts:
21 silly publish    { build: 'nwb build-react-component --title react-common-admin',
21 silly publish      test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/doronnahum/react-common-admin.git' },
21 silly publish   keywords:
21 silly publish    [ 'react',
21 silly publish      'react-native',
21 silly publish      'form',
21 silly publish      'fields',
21 silly publish      'inputs',
21 silly publish      'mobile',
21 silly publish      'dropdown',
21 silly publish      'date',
21 silly publish      'validate' ],
21 silly publish   author: { name: 'doron nahum' },
21 silly publish   license: 'ISC',
21 silly publish   bugs: { url: 'https://github.com/doronnahum/react-common-admin/issues' },
21 silly publish   homepage: 'https://github.com/doronnahum/react-common-admin#readme',
21 silly publish   dependencies:
21 silly publish    { 'babel-preset-latest': '^6.24.1',
21 silly publish      lodash: '^4.17.10',
21 silly publish      moment: '^2.22.2',
21 silly publish      'prop-types': '^15.6.0',
21 silly publish      react: '^16.3.0',
21 silly publish      'react-cross-form': '^1.2.12',
21 silly publish      'react-cross-inputs': '^0.0.21' },
21 silly publish   devDependencies:
21 silly publish    { 'babel-plugin-transform-runtime': '^6.23.0',
21 silly publish      'babel-preset-env': '^1.6.1',
21 silly publish      'babel-preset-react': '^6.24.1',
21 silly publish      'babel-preset-stage-0': '^6.24.1',
21 silly publish      'babel-runtime': '^6.26.0',
21 silly publish      'copy-webpack-plugin': '^4.0.1',
21 silly publish      'cross-env': '^5.1.3',
21 silly publish      'css-loader': '^0.28.5',
21 silly publish      enzyme: '^3.3.0',
21 silly publish      'enzyme-adapter-react-16': '^1.1.1',
21 silly publish      eslint: '^4.5.0',
21 silly publish      'eslint-config-react-tools': '^1.0.10',
21 silly publish      'eslint-plugin-import': '^2.7.0',
21 silly publish      'eslint-plugin-jsx-a11y': '^6.0.2',
21 silly publish      'eslint-plugin-react': '^7.3.0',
21 silly publish      gitdocs: '^1.5.17',
21 silly publish      jsdom: '^11.6.0',
21 silly publish      nwb: '^0.21.2' },
21 silly publish   readme: '\r\n# react-common-admin\r\n\r\nA react page container that works with [react-parse](https://www.npmjs.com/package/react-parse)  to fetch data from server and display as table/gallery or customs component.\r\n\r\n\r\n![enter image description here](https://lh3.googleusercontent.com/SIsABVRWjGloAHiU2wrcRJGA2aGyeaE4k5V_y3hFeUwYdCyKReNNFmlzZtE6k7hKvic8tGkaV4Vyqg "screenRecord")\r\n## Table of content\r\n\r\n [Installation](#installation)\r\n- [initCommonAdmin](#init-react-common-admin)\r\n\t- [notification](#notification) \r\n\t- [defaultDocumentMessages](#defaultdocumentmessages) \r\n\t- [langDir](#langdir) \r\n\t- [customTitle](#customtitle) \r\n\t- [setParams](#setparams) \r\n\t- [getParams](#getparams) \r\n- [Basic Usage](#basic-usage) \r\n- [Props](#props) \r\n\t- [Document Props](#documentprops)\r\n\t\t- [View Component](#document-viewcomponent)\r\n\t\t- [Wrapper Component](#document---wrapper)\r\n\t- [Collection Props](#collectionprops)\r\n\t\t - [View Component](#collention-viewcomponent)\r\n\t\t\t- collection view Component ready to use\r\n\t\t\t\t- [Table - is the default](#table)\r\n\t\t\t\t- [DraggableTable](#draggabletable)\r\n- [Document witout list](#document-witout-list)\r\n- [DraggableTable example](#draggabletable-example)\r\n- [CustomTitle](#customtitle)\r\n- [Document fields](#document-fields)\r\n\t- [TextInput](#textinput)\r\n\t- [TextArea](#textarea)\r\n\t- [MobileInput](#mobileinput)\r\n\t- [UploadFile](#uploadfile)\r\n\t- [SelectFromMedia](#selectfrommedia)\r\n\t- [NumberInput](#numberinput)\r\n\t- [DateTime](#datetime)\r\n\t- [Pointer](#pointer)\r\n\t- [ArrayOfPointer](#arrayofpointer)\r\n\t- [ArrayOfPointerTableView ](#arrayofpointertableview )\r\n\t- [DropDown ](#dropdown )\r\n\t- [ObjectsDropDown](#objectsdropdown)\r\n\t- [AddressAutoComplete  ](#addressautocomplete  )\r\n\t- [AddressWithMapView ](#addresswithmapView )\r\n\t- [Tags](#tags)\r\n- [Collection fields](#collection-fields)\r\n\t- [Formatter](#formatter) \r\n\t- [Fields](#table-fields-exmpels)\r\n\t\t- [string](#string)\r\n\t\t- [Pointer](#pointer-with-include)\r\n\t\t- [Array](#array)\r\n\t\t- [Array of Pointers](#array-of-pointer)\r\n\t\t- [Action Button](#action-button)\r\n\r\n## Installation\r\n 1. First you need to install:\r\n[Ant Design](https://ant.design/) \r\n\r\n 2.2- Install react-common-admin\r\n\tnpm i react-common-admin --save\r\n\t```\r\n\r\n 3.3- Init react-common-admin\r\n     \r\n\t ```jsx\r\n\t //     inside your root component\r\n\t \r\n```bash\r\nimport { initCommonAdmin } from  \'react-common-admin\';\r\n\t \r\n\tinitCommonAdmin({\r\n\t\tnotification,\r\n\t\tdefaultDocumentMessages,\r\n\t\tlangDir,\r\n\t\tcustomTitle,\r\n\t\tsetParams,\r\n\t\tgetParams\r\n\t})\r\n\t```\r\n\r\n\r\n\r\n\r\n## Init react-common-admin\r\ninitCommonAdmin exmples for of the options\r\n### notification \r\n```jsx\r\n/*\r\n\tnotification service -\r\n\tYou can pass a notification service and\r\n\treact-common-admin will trigger a notification\r\n\tin each put/post/delete action\r\n*/\r\nconst  notification  = {\r\n\tsuccess: (message) => console.log(\'success\', message),\r\n\terror: (message) => console.log(\'error\', message),\r\n\tinfo: (message) =>  console.log(\'info\', message),\r\n\twarning: (message) => console.log(\'warning\', message),\r\n\twarn: (message) =>  console.log(\'warn\', message),\r\n}\r\n```\r\n### defaultDocumentMessages\r\n```jsx\r\n/*\r\n\tnotification default messages -\r\n\tYou can pass a default notification messages\r\n*/\r\nconst  defaultDocumentMessages  = {\r\n\tonPostMessage: \'Created successfully\',\r\n\tonPostFailedMessage: \'document - Created failed\',\r\n\tonPutMessage: \'Update successfully\',\r\n\tonPutFailedMessage: \'document - Update failed\',\r\n\tonDeleteMessage: \' Deleted successfully\',\r\n\tonDeleteFailedMessage: \' Deleted failed\'\r\n}\r\n```\r\n### langDir\r\n```jsx\r\nconst langDir = \'ltr\' // You can set \'rtl\' or \'ltr\'\r\n```\r\n### customTitle\r\n```jsx\r\n/*\r\n\tdocument customTitle-\r\n\tYou can pass a function that get a\r\n\tprops and return the title to diaplay\r\n\tin the document header\r\n*/\r\nconst  customTitle  =  function ({ state, props }) {\r\n\tconst { data } =  state;\r\n\tconst { objectId, schemaName, titleKey } =  props\r\n\tlet  title  =  \'\';\r\n\tconst  isNew  =  !objectId;\r\n\tif (isNew) {\r\n\ttitle  = `Create a New ${schemaName} document`\r\n\t} else {\r\n\tlet  titleFromKey  = (titleKey  &&  data) ? data[titleKey] :  \'\'\r\n\tlet  hasTitle  = titleFromKey.length\r\n\ttitle  = `Edit ${schemaName} document - ${hasTitle  ?  titleFromKey  :  objectId}`\r\n}\r\nreturn  title;\r\n}\r\n```\r\n### setParams\r\n```jsx\r\n/*\r\n\tIf you want to persist the user work when the page is full reload,\r\n\twe need an access to URL params, pass setParams and setParams\r\n*/ se\r\nconst ar =   setParams  =  function (key, value) {\r\n\tconst href  =  `${Router.pathname}?${key}=${value}`\r\n\tconst  as  =  href\r\n\tRouter.push(href, as, { shallow:  true })\r\n}\r\n```\r\n### getParams\r\n```jsx\r\nimport  Router  from  \'next/router\'; // You can use any Router service you want\r\n\r\nconst  getParams  =  function () {\r\n\treturn  Router.query\r\n}\r\n```\r\n\r\n\r\n## Basic Usage\r\n\r\n> You can use any inputs you want, not only from library fields\r\n\r\n\r\nconst  getParams  =  function () {\r\n\treturn  Router.query\r\n}\r\n\r\n//--- ntional confuratnmon a efoutese, a, sote })\r\n\r\n\r\n```jsx\r\nimport  React  from  \'react\';\r\nimport {CommonAdmin, fields} from  \'react-common-admin\'\r\n\r\nconst DocFields = [ // See react-cross-form\r\n{\r\n\tkey: \'firstName\',\r\n\tlabel: \'First Name\',\r\n\tvalidators: { presence: true, length: { minimum: 2 } },\r\n\tcomponent: fields.TextInput\r\n}]\r\n\r\nconst TableField = [\r\n{ key: \'objectId\',\r\n  title: \'Object Id\'\r\n },\r\n { key: \'firstName\',\r\n  title: \'First Name\'\r\n }\r\n]\r\nexport  default  class  Example  extends  React.Component {\r\nrender() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<CommonAdmin\r\n\t\t\t\tschemaName=\'Example\'\r\n\t\t\t\ttargetName=\'ExampleScreen\'\r\n\t\t\t\ttitle=\'Example Screen\'\r\n\t\t\t\tdocumentProps={{\r\n\t\t\t\t\tfields: DocFields, // Define this fields you want to render\r\n\t\t\t\t}}\r\n\t\t\t\tcollectionProps={{\r\n\t\t\t\t\tfields: TableField\r\n\t\t\t\t}}\t\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}}\r\n```\r\n\r\n## Props\r\n| key | type | Description|\r\n|-----|--|--|\r\n|title|string|title to dispaly|\r\n|targetName|string <br/><small>required<small></small></small>|react-parse targetName|\r\n|schemaName|string <br/><small>required<small></small></small>|react-parse schemaName|\r\nfunctionName|string| react-parse functionName <br/> <small><small>When you using clude code the delete from table is not enabled</small></small>\r\nonVisibleDocumentsChanged|function| Function that be call when VisibleDocuments state is changedfetchExtraData|array|array of objects, each object is react-parse collection configuration <br />[{schemaName: \'Member\', targetName\'MemberData\'}]<br/> The data will be avilable for you in the components\r\ndocumentProps|object <br/><small>required<small></small></small>| See documentProps\r\ncollectionProps|object <br/><small>required<small></small></small>| See collectionProps\r\nopenAsFullDoc|boolean<br/><small>default: true<small></small></small>|, set false if you want the document to open as a half screen\r\nparamSync|boolean<br/><small>default: true<small></small></small>|set false if you didnt want to sync visibleDocument with url parms\r\nrefreshExtraDataOnRefresh|boolean<br/><small>default: true<small></small></small>|When true, react-parse will fetch data to all extra data and not only document/collection\r\n\r\n## documentProps\r\n| key | type | Description|\r\n|-----|--|--|\r\nfields|array <br/><small>required<small></small></small>| we use [react-cross-form](https://github.com/doronnahum/react-cross-form#readme)<br/> Options that not from react-cross-form: <br/> 1- You can add to each field an InitialValue (work only with new document)\r\nwrapper|element|You can replace the default side modal wrapper , wrapper get this props <br />{<br />isOpen: bollean,<br /> onClose: function,<br />title: string,<br /> children: react children<br />}|\r\ntitle|string|title to display\r\ncustomTitle|function| function that get {state, props} and return string as title\r\nparseDataBeforePost|function| optional - function that call with the data before post, (data, tableProps) => {return ({...data, {test: 1})}\r\nparseDataBeforePut|function| optional - function that call with the data before put, (data, tableProps, objectId, docFetchProps) => {return ({...data, {test: 1})}\r\nsaveOnBlur|boollean| default is true, run react-parse put when input is blur\r\nmessages| object| You can display a custom message, this data will pass to your notification service, see  initCommonAdmin\r\nonPostFinished|function|react-parse onPostFinished\r\nonPutFinished|function|react-parse onPutFinished\r\nonDeleteFinished|function|react-parse onDeleteFinished\r\nshowDeleteButton|boolean|\r\nshowCloseButton|boolean|\r\nviewComponent|element| default is DocForm but you can pass your custom component, See document viewComponent props for more information\r\nstayOpenAfterPost|boolean|Set true if you want to leave the document open after post successfully\r\ninitialValue|object| You can pass object and new document will create with this initialValue, see react-parse initialValue\r\n\r\n## document viewComponent\r\n\r\n**How to pass your component ?**\r\n```jsx\r\nimport MyDocView from \'./MyDocView\'\r\n...\r\nreturn (\r\n<CommonAdmin\r\n\t...\r\n\tdocumentProps={{\r\n\t\tviewComponent: MyDocView \r\n\t}}\r\n\t...\r\n```\r\n**What props you will get ?**\r\n| key | type | Description|\r\n|-----|--|--|\r\n|\r\n\tfetchProps |object|S- see [react-parse fetchProps](https://github.com/doronnahum/react-parse#fetchprops)|\r\n;\r\n\tonClose|, - function |C- call to close modal (relevant when the document wrapper is modal)\r\n\tisOpen |- boolean| True when th - is modal is open\r\n\tobjectId|, - string| Parse document id, - empty on new document \r\nsaveOnBlur| boolean| The value from your CommonAdmin>documentProps configuraion\r\n\tfields|, - array|The value from your CommonAdmin>documentProps configuraion|\r\n\tfieldsOptions |object|F- fetchExtraData is pass to document as fieldsOptions - pass only for fields that contain a targetName.<br />, the key for each value in fieldsOptions is the targetName\r\nextraData | object| all fetchExtraData results\r\n...||Any other parameters you set inside documentProps will pass to your viewComponent\r\n\r\n### document - wrapper\r\nThe default wrapper is a side modal bot you can use our modal like that\r\n```jsx\r\nimport {Modal} from \'react-coomon-admin\r\n...\r\nreturn (\r\n<CommonAdmin\r\n\t...\r\n\tdocumentProps={{\r\n\t\twrapper: Modal\r\n\t}}\r\n\t...\r\n/>\r\n```\r\nAnd you can customize The wrapper like that\r\n```jsx\r\nimport Modal from \'./rect-some-modal-component\'\r\n\r\nclass  MyDocWrapper extends  React.Component {\r\n\trender() {\r\n\t\tconst {isOpen, onClose, modalId} =  this.props\r\n\t\treturn(\r\n\t\t\t<Modal isOpen={isOpen} onClose={() => onClose(modalId)} >\r\n\t\t\t\t{children}\r\n\t\t\t</Modal>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default class  MyScreen extends  React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<CommonAdmin\r\n\t\t\t\t...\r\n\t\t\t\tdocumentProps={{\r\n\t\t\t\t\twrapper: MyDocWrapper\r\n\t\t\t\t}}\r\n\t\t\t\t...\r\n\t\t\t/>\r\n\t\t)\r\n\t},\r\n\t... all other parameters from your documentProps configuration\r\n}\r\n```\r\n\r\n### document - initialValue\r\nYou have to options to set to a new document an initialValue,\r\nas you can see in the example, one option is inside the document fields for each field and the other option is inside the documentProps\r\n```jsx\r\nconst DocFields = [\r\n\t{\r\n\tkey: \'title\',\r\n\tlabel: \'Title\',,\r\n\tcomponent: TextInput,\r\n\tinitialValue: \'The article title initialValue\'\r\n\t},\r\n\t{\r\n\tkey: \'body\',\r\n\tlabel: \'Body\',,\r\n\tcomponent: TextInput,\r\n\t},\r\n]\r\n<CommonAdmin\r\n\t...\r\n\tdocumentProps={{\r\n\tfields: DocFields,\r\n\tinitialValue: {\r\n\t\tbody: \'The article body initialValue\'\r\n\t}\r\n\t}}\r\n``` \r\n## collectionProps\r\n\r\n| key | type | Description|\r\n|-----|--|--|\r\nfields|array <br/><small>required<small></small></small>| [{key: \'objectId\', title: \'Object Id\', search: true, formatter: (cell, row) => {}} ]\r\ntitle|string|title to display\r\nlimit|number|react-parse limit value , default is 10\r\nskip|number|react-parse skip value , default is 0,\r\norder|string|react-parse string, default is \'createdAt\'\r\nquery|object|react-parse query, default is {}\r\ndataHandler |funciton| react-parse dataHandler \r\nonLimitChanged|funciton|if you didn\'t pass this handlers than your limit is used as initial value and react-common-admin will handle the changes\r\nonSkipChanged|funciton| optional - only if you want to override our function and take the control of this value\r\nonOrderChanged|funciton|optional - only if you want to override our function and take the control of this value\r\nonPagination|funciton|optional - only if you want to override our function and take the control of this value\r\nonQueryChanged|funciton|optional - only if you want to override our function and take the control of this value\r\ntableProps|object| any props you want to pass to the viewComponent\r\n...||Any other parameters you set inside collectionProps will pass to your viewComponent\r\nviewComponent|element|See collention viewComponent propsviewComponent\r\n## collention viewComponent\r\n**How to pass your component ?**\r\n```jsx\r\nimport MyTablView from \'./MyDocView\'\r\n...\r\nreturn (\r\n<CommonAdmin\r\n\t...\r\n\tcollectionProps={{\r\n\t\tviewComponent: MyTablView \r\n\t}}\r\n\t...\r\n```\r\n**What props you will get ?**\r\n| key | type | Description|\r\n|-----|--|--|\r\nextraData | object| All fetchExtraData results\r\n|fetchProps |object|See [react-parse fetchProps](https://github.com/doronnahum/react-parse#fetchprops)\r\nfields\t|array\t|The value from your CommonAdmin>collentionProps configuraion\r\nonCreateNewDoc|function |Call this and document modal will display, you can pass as first parameter any data you want and document will get this on props.dataFromCollection\r\nonEditDoc|function | Call this with objectId and document modal will display to edit, you can pass as seconde parameter any data you want and document will get this on props.dataFromCollectio\r\nskip| number| Current skip value\r\nlimit |number| Current limit value\r\n|onLimitChanged|function | Call to set new limit value<br/> onLimitChanged(20)\r\n|onSkipChanged|function |Call to set new skip value<br/> onSkipChanged(20)\r\n|onOrderChanged|function |Call to set new order value<br/> onOrderChanged(\'createdAt\')\r\n|onPagination|function |Call to set new limit and skip value<br/> onPagination(page, limit)<br/>We caliculate skip from page like that:<br/> skip = (page  -  1) *  limit\r\n...||Any other parameters you set inside collentionProps will pass to your viewComponent\r\n## Table\r\nThe default collection viewComponent is Table\r\nYou can pass inside collentionProps tableProps  object to customize some things in the table\r\n```jsx\r\n...\r\nreturn (\r\n<CommonAdmin\r\n\t...\r\n\tcollectionProps={{\r\n\t\ttableProps : {\r\n\t\t\tdisabledDelete: true\r\n\t\t}\r\n\t}}\r\n\t...\r\n```\r\n### tableProps options\r\n-----\r\n| key | type | Description|\r\n|-----|--|--|\r\n|renderAddBtn|function|funciton that get all table props and need to return a button|\r\ncustomOnEdit|function| funciton that be call when user click on edit button, with the row and all table props (rowObjectId, tableProps) => {...}\r\nrenderAddBtn |function|funciton that be call when user click on add button\r\ndisabledDelete|boolean|Set true to hide the delete button\r\n### renderAddBtn exmple\r\n```jsx\r\nreturn (\r\n<CommonAdmin\r\n\tcollectionPops: {\r\n\t\ttableProps: {\r\n\t\t\trenderAddBtn: (props) => {\r\n\t\t\t\treturn <button onClick={() => {\r\n\t\t\t\t\tprops.onCreateNewDoc()\r\n\t\t\t\t}}>Add</button>\r\n\t\t\t},\r\n\t\t}\r\n...\r\n/>\r\n```\r\n## DraggableTable\r\nBy default collection render a table, if you want you can pass as viewComponent a DraggableTable, it is like the regular table with the ability to drag row and change value in the DB base user drag and drop\r\n```jsx\r\nimport {CommonAdmin, DraggableTable} from  \'react-common-admin\';\r\n<CommonAdmin\r\n...\r\n\tcollectionProps={{\r\n\t...\r\n\t\tviewComponent:  DraggableTable,\r\n\t\ttableProps: {\r\n\t\t\torderKey:  \'orderKey\' // in this case each document in the DB contain orderKey key with value that help us render the view by a specific order\r\n\t\t// optional\r\n\t\tgroups: [\'related\', \'child\'], // render data in separate tables\r\n\t\tgroupBy: \'relationType\', // key to group value\r\n\t\t\t\r\n\t\t}\r\n...\r\n```\r\n\r\n## document witout list\r\n### Need only a documet ?\r\nSee this example\r\n```jsx\r\nimport React from \'react\';\r\nimport {CommonAdmin, StaticDoc} from \'react-common-admin\'\r\nimport {DocFields} from \'./config\';\r\n\r\nexport default class Example extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CommonAdmin\r\n          schemaName=\'Member\'\r\n          targetName=\'ProfileSettings\'\r\n          title=\'Profile Settings\'\r\n          showCollection={false} //--------------->!important\r\n          documentProps={{\r\n            fields: DocFields,\r\n            objectId: \'eviegCusH8\',\r\n            wrapper: StaticDoc, //--------------->!important\r\n            messages: {\r\n              onPostMessage: \'Create successfully\',\r\n              onPostFailedMessage: \'Create failed\',\r\n              onPutMessage: \'Update successfully\',\r\n              onPutFailedMessage: \'Update failed):\',\r\n              onDeleteMessage: \'Deleted successfully\',\r\n              onDeleteFailedMessage: \'Deleted failed\'\r\n            },\r\n            customTitle: ({objectId, data}) => { \'title\' }\r\n          }}\r\n          fetchExtraData={[\r\n            {schemaName: \'City\', targetName: \'CityDropDown\'},\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n```\r\n\r\n### customTitle\r\nWhen you init with customTitle you can use it like that:\r\n```\r\nimport { CommonAdmin, customTitle } from  \'react-common-admin\'\r\n\t<CommonAdmin\r\n\t\tschemaName=\'Example\'\r\n\t\ttargetName=\'ExampleScreen\'\r\n\t\ttitle=\'Example Screen\'\r\n\t\tdocumentProps={{\r\n\t\tfields: DocFields, // Define this fields you want to render\r\n\t\tcustomTitle: customTitle,\r\n\t\ttitleKey: \'firstName\',\r\n\t\tinclude: \'imageFromMedia\'\r\n...\r\n}}\r\n```\r\n\r\n## Document fields\r\nreact-common-admin fields\r\n```jsx\r\nimport {fields} from \'react-common-admin\'\r\n```\r\navailable fields\r\n```jsx\r\nconst {\r\n\tTextInput, NumberInput, MobileInput,\r\n\tUploadFile, DateTime, Pointer, DropDown,\r\n\tObjectsDropDown, AddressAutoComplete,\r\n\tGeoLocationMapView, AddressWithMapView,\r\n\tTags, ArrayOfPointer, ArrayOfPointerTableView, TextArea\r\n} =  fields;\r\n```\r\n## Fields Examples\r\n\r\n### TextInput\r\n```jsx\r\n{\r\n\tkey:  \'firstName\',\r\n\tlabel:  \'First Name\',\r\n\tvalidators: { presence:  true, length: { minimum:  2 } },\r\n\tcomponent:  fields.TextInput,\r\n\thelpText:  \'Please tell as what is your name\'\r\n},\r\n```\r\n### TextArea\r\n```jsx\r\n{\r\n\tkey:  \'info\',\r\n\tlabel:  \'Whe are you\',\r\n\tcomponent:  fields.TextArea,\r\n\thelpText:  \'I am example of a textArea\'\r\n},\r\n```\r\n### MobileInput\r\nWe use \'libphonenumber-js to validate the phone number\r\nimport { isValidNumber } from  \'libphonenumber-js\'\r\n```jsx\r\n{\r\n\tkey:  \'mobile\',\r\n\tlabel:  \'Mobile\',\r\n\tcustomValidation:  function (field, value) {\r\n\t\tlet  errors  = []\r\n\t\tif(!value  ||  value  ===  \'\') {\r\n\t\terrors.push(\'can\\\'t be blank\')\r\n\t\t} else  if(!isValidNumber(value)) {\r\n\t\terrors.push(\'Please enter a valid phone number\')\r\n\t\t}\r\n\t\treturn  errors\r\n\t},\r\n\tcomponent:  fields.MobileInput,\r\n},\r\n```\r\n### UploadFile\r\n\r\n 1. Upload file to parse File Field\r\n\r\n\r\n```jsx\r\n{\r\n\tkey:  \'image\',\r\n\tlabel:  \'Image as Parse File Example\',\r\n\tcomponent:  fields.UploadFile,\r\n\tvalidators: { presence:  true }\r\n},\r\n```\r\n\r\n 2. Upload file and save as url sring\r\n\r\n\r\n```jsx\r\n{\r\n\tkey:  \'urlString\', // Example how to upload an image an set a url string and not parse file object;\r\n\tlabel:  \'Image - image as string example\',\r\n\tcomponent:  fields.UploadFile,\r\n\tvalidators: { presence:  true },\r\n\tfileValueHandler: (res) => {\r\n\t\treturn  res.data.url\r\n\t}\r\n},\r\n```\r\n### SelectFromMedia\r\n\r\n 1. Select file from media screen and save as pointer to media collection\r\n\r\n```jsx\r\n{\r\nkey:  \'imageFromMedia\',\r\nlabel:  \'imageFromMedia - image as pointer to Media\',\r\ncomponent:  fields.SelectFromMedia,\r\nasPointer:  true,\r\nvalidators: { presence:  true }\r\n},\r\n```\r\n\r\n 2. Select file from media screen and save as string url\r\n\r\n```jsx\r\n{\r\nkey:  \'imageFromMediaAsString\',\r\nlabel:  \'imageFromMediaAsString - image as string from Media\',\r\ncomponent:  fields.SelectFromMedia,\r\nvalidators: { presence:  true }\r\n},\r\n```\r\n\r\n### NumberInput\r\n```jsx\r\n{\r\n\tkey:  \'age\',\r\n\tlabel:  \'Age - number input example\',\r\n\tcomponent:  fields.NumberInput,\r\n},\r\n```\r\n### DateTime\r\n```jsx\r\n{\r\n\tkey:  \'birthday\',\r\n\tlabel:  \'Birthday\',\r\n\tcomponent:  fields.DateTime,\r\n},\r\n```\r\n### Pointer\r\n```jsx\r\n{\r\n\tkey:  \'city\',\r\n\tlabel:  \'City - pointer fields example\',\r\n\tcomponent:  fields.Pointer,\r\n\tschemaName:  \'City\',\r\n\ttargetName:  \'CityDropDown\',\r\n\tlabelKey:  \'name\'\r\n},\r\n```\r\n### ArrayOfPointer\r\ndrop down with multi select\r\n```jsx\r\n{\r\n\tkey:  \'roles\',\r\n\tlabel:  \'Roles\',\r\n\tcomponent:  fields.ArrayOfPointer,\r\n\tschemaName:  \'City\',\r\n\ttargetName:  \'CityDropDown\',\r\n\tlabelKey:  \'name\'\r\n}\r\n```\r\n### ArrayOfPointerTableView \r\nTable with switch button in each row\r\n```jsx\r\n{\r\n\tkey:  \'cities\',\r\n\tlabel:  \'Cities\',\r\n\tcomponent:  fields.ArrayOfPointerTableView,\r\n\tschemaName:  \'City\',\r\n\ttargetName:  \'CityDropDown\',\r\n\tlabelKey:  \'name\'\r\n},\r\n```\r\n### DropDown\r\nselect string from array of static options\r\n```jsx\r\n{\r\n\tkey:  \'favoriteColor\',\r\n\tlabel:  \'Favorite Color - dropDown static options example - string value\',\r\n\tcomponent:  fields.DropDown,\r\n\toptions: [\r\n\t\t{key: \'red\', label: \'red\'},\r\n\t\t{key: \'green\', label: \'green\'},\r\n\t\t{key: \'blue\', label: \'blue\'},\r\n\t\t{key: \'pink\', label: \'pink\', customRender: ({label}) =>  <p style={{color: \'pink\'}}>{label}</p>},\r\n\t]\r\n}\r\n```\r\n### ObjectsDropDown\r\nselect object from array of static options\r\n```jsx\r\n{\r\n\tkey:  \'favoritePhone\',\r\n\tlabel:  \'Favorite Phone - dropDown static options example - object value\',\r\n\tcomponent:  fields.ObjectsDropDown,\r\n\tvalueKey:  \'model\', // default is key\r\n\tlabelKey:  \'fullName\', // default is label\r\n\toptions: [\r\n\t\t{company:  \'Samsung\', OS:  \'Android 8\', model:  \'Galaxy S9 Plus\', fullName:  \'Samsung Galaxy S9 Plus\'},\r\n\t\t{company:  \'Samsung\', OS:  \'Android 8\', model:  \'Galaxy S9\', fullName:  \'Samsung Galaxy S9\'},\r\n\t\t{company:  \'Huawei\', OS:  \'Android 8.1\', model:  \'P20 Pro\', fullName:  \'Huawei P20 Pro\'},\r\n\t]\r\n},\r\n```\r\n### AddressAutoComplete\r\ninput with autocomplete off location\r\n```jsx\r\n{\r\n\tkey:  \'address\',\r\n\tlabel:  \'Address\',\r\n\tcomponent:  AddressAutoComplete,\r\n\taccessToken:  envConfig.MAP_BOX_ACCESS_TOKEN\r\n},\r\n```\r\n### AddressWithMapView\r\naddress string and geoLocation at the same document\r\n```jsx\r\n{\r\n\tkey:  \'group-address\',\r\n\taddressFieldKey:  \'address\',\r\n\tlocationFieldKey:  \'location\',\r\n\tcomponent:  AddressWithMapView,\r\n\tgroup: [\r\n\t\t{\r\n\t\tkey:  \'address\',\r\n\t\tlabel:  \'Address\',\r\n\t\tcomponent:  AddressAutoComplete,\r\n\t\taccessToken:  envConfig.MAP_BOX_ACCESS_TOKEN\r\n\t\t},\r\n\t\t{\r\n\t\tkey:  \'location\',\r\n\t\tlabel:  \'Location\',\r\n\t\tcomponent:  GeoLocationMapView,\r\n\t\taccessToken:  envConfig.MAP_BOX_ACCESS_TOKEN\r\n\t\t},\r\n\t],\r\n},\r\n```\r\n### Tags\r\n```jsx\r\n{\r\n\tkey:  \'tags\',\r\n\tlabel:  \'Tags\',\r\n\tcomponent:  Tags, // Good for array of string\r\n\tvalidators: { presence:  true, length: { minimum:  2 } },\r\n\thelpText:  \'Set tags to help the search engine what you want in the future\'\r\n},\r\n```\r\n## Collection Fields\r\nEach field need to include a key and title\r\n\r\n - key -  The key to data inside the data response from the server \r\n - title - The title to display in the table header\r\n - search - Set true if you want to include this field when user type inside the search input\r\n - formatter - Pass function if you want to manipulate the value to display (like in Date value)\r\n\r\n### formatter \r\nYour function will get (cell, row, field, extraData)\r\n\r\n - cell - The value of this field in the data base\r\n - row - The all document data {objectId...}\r\n - field - Your field coniguration {key : \'..\', titiel: \'...\', formatter... }\r\n - extraData - All extraData , this very helpful with pointer fields\r\n\r\n> This formatter for the collection fields\r\n> document formatter is different, check react-cross-form formatter for more details\r\n\r\n\r\n### formatter examples\r\n```jsx\r\nexport  const  imgForamtter  =  function (cell, row, field, extraData) {\r\n\tif (cell  &&  cell.url) {\r\n\t\treturn  <img  src={cell.url}  style={{width:  50, height:  50}}/>\r\n\t}\r\n\treturn <p>No image</p>\r\n}\r\n```\r\n\r\n> Before you create a formatter, check this list, maybe have something redey for you\r\n\r\n### Table Fields exmpels\r\n```jsx\r\nimport {formatters} from  \'react-common-admin\'\r\n```\r\nformatter = function(fieldValue, docData, fieldConfig, extraData){ return \'your view\'}\r\n### string\r\n  ```jsx\r\n  {\r\n    key: \'objectId\',\r\n    title: \'Object Id\',\r\n    search: true\r\n  },\r\n  ```\r\n  \r\n  ### img\r\n  ```jsx\r\n  \r\n{\r\n\tkey:  \'image\',\r\n\ttitle:  \'Image\',\r\n\tformatter:  formatters.imageFormatter\r\n},\r\n  ```\r\n  \r\n### Pointer with include\r\n  ```jsx\r\n{\r\n\tkey:  \'partner\',\r\n\ttitle:  \'Account\',\r\n\tformatter: (cell, row) => {\r\n\t\tif(typeof  cell  ===  \'object\') {\r\n\t\t\tconst {objectId, name} =  cell\r\n\t\t\treturn <p>{name  ||  objectId}</p>;\r\n\t\t}else{\r\n\t\t\treturn <p></p>\r\n\t\t}\r\n\t},\r\n},\r\n  ```\r\n  \r\n  ### Array\r\n  ```jsx\r\n  {\r\n\tkey:  \'roles\',\r\n\ttitle:  \'Roles\',\r\n\tformatter: formatters.arrayFormatter\r\n}\r\n  \r\n  ```\r\n### Array of Pointers\r\nWhen to use?\r\nwhen the response from server is like that: [\'A12365\',\'Ddck344\']\r\nand you want to display somting like that:  Red,Green\r\n```\r\n{\r\n\tkey:  \'verticals\',\r\n\ttitle:  \'Verticals\',\r\n\tpointerTo:  \'VerticalDropDown\',\r\n\tdisplayKey:  \'name\',\r\n\tformatter:  formatters.arrayOfPointerDisplay,\r\n\t\r\n},\r\n/*\r\nIn this example, our additional data include this:\r\n<CommonAdmin\r\n\tfetchExtraData={[\r\n\t\t{schemaName:  \'Vertical\', targetName:  \'VerticalDropDown\'},\r\n\t}]\r\n*/\r\n```\r\n### Action Button\r\nIf you want to show in the table action button, at this to collection fields\r\n```jsx\r\n{\r\n\tkey:  \'actionBtn\',\r\n\tactionBtn:  true\r\n\r\nonOrderChanged|funciton|\r\nonPagination|funciton|\r\nonQueryChanged|funciton|\r\ntableProps|object| any props you want to pass to the viewComponent\r\n### collention viewComponent props\r\n------\r\n```jsx\r\n{\r\n\tfetchProps - see react-parse fetchProps \r\n\tfields - array\r\n\tdataHandler - see react-parse dataHandler (clodeCode)\r\n\textraData - all fetchExtraData results\r\n\ttitle - string\r\n\tonCreateNewDoc- function - call this and document modal will display, you can pass as first parameter any data you want and document will get this on props.dataFromCollection\r\n\tonEditDoc- function - call this with objectId and document modal will display to edit, you can pass as seconde parameter any data you want and document will get this on props.dataFromCollectio\r\n\tskip - number\r\n\tlimit - number\r\n\t// function to call when you want to set a new value\r\n\tonLimitChanged: (limit: number) => {...}\r\n\tonSkipChanged: (skip: number) => {...}\r\n\tonOrderChanged: (order: string => {...}\r\n\tonQueryChanged: (query: object) => {...}\r\n\tonPagination: (page: number, pageSize: number) => {...}\r\n\t... all other parameters from your collectionProps configuration\r\n}\r\n```\r\n\r\n### collention - tableProps options\r\n-----\r\n| key | type | Description|\r\n|-----|--|--|\r\n|renderAddBtn|function|funciton that get all table props and need to return a button|\r\ncustomOnEdit|function| funciton that be call when user click on edit button, with the row and all table props (rowObjectId, tableProps) => {...}\r\nrenderAddBtn example |\r\ndisabledDelete|boolean|Set true to hide the delete button\r\n\r\n```jsx\r\nrenderSelectTypeToAdd(res) {\r\nconst  productTypes  =  objDig(res, \'extraData.ProductType\') || []\r\nconst  onSelect  = (menuItem) => {\r\nres.onCreateNewDoc(menuItem.item.props.value)\r\n}\r\nreturn (\r\n\t<Dropdown \r\n\t\toverlay={\r\n\t\t\t<Menu  onClick={onSelect}>\r\n\t\t\t{productTypes.map(item  => {\r\n\t\t\treturn  <Menu.Item  key={item.objectId}  value={item}>{item.name}</Menu.Item>\r\n\t\t\t})}</Menu>\r\n\t\t}\r\n\t\t>\r\n\t\t<Button  style={{ marginLeft: 8 }}>\r\n\t\t\tAdd <Icon  type="down" />\r\n\t\t</Button>\r\n\t</Dropdown>\r\n)\r\n}\r\n...\r\n...\r\n<CommonAdmin\r\n...\r\ncollectionPops: {\r\n...\r\ntableProps: {\r\nrenderAddBtn: this.renderSelectTypeToAdd,\r\n}\r\n...\r\n```\r\n\r\n\r\n\r\n### react-parse fetchProps\r\nsee full details in [react-parse docs](https://github.com/doronnahum/react-parse#fetchprops)\r\n{data, error, status, info. isLoading, refresh, cleanData, put, post, deleteDoc, updateField}\r\n\r\n### Need only a documet witout list?\r\nSee this example\r\n```jsx\r\nimport React from \'react\';\r\nimport {CommonAdmin, StaticDoc} from \'react-common-admin\'\r\nimport {DocFields} from \'./config\';\r\n\r\nexport default class Example extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CommonAdmin\r\n          schemaName=\'Member\'\r\n          targetName=\'ProfileSettings\'\r\n          title=\'Profile Settings\'\r\n          showCollection={false} //--------------->!important\r\n          documentProps={{\r\n            fields: DocFields,\r\n            objectId: \'eviegCusH8\',\r\n            wrapper: StaticDoc, //--------------->!important\r\n            messages: {\r\n              onPostMessage: \'Create successfully\',\r\n              onPostFailedMessage: \'Create failed\',\r\n              onPutMessage: \'Update successfully\',\r\n              onPutFailedMessage: \'Update failed):\',\r\n              onDeleteMessage: \'Deleted successfully\',\r\n              onDeleteFailedMessage: \'Deleted failed\'\r\n            },\r\n            customTitle: ({objectId, data}) => { \'title\' }\r\n          }}\r\n          fetchExtraData={[\r\n            {schemaName: \'City\', targetName: \'CityDropDown\'},\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n```\r\n\r\n## DraggableTable example\r\nBy default collection render a table, if you want you can pass as viewComponent a DraggableTable, it is like the regular table with the ability to drag row and change value in the DB base user drag and drop\r\n```jsx\r\nimport {CommonAdmin, DraggableTable} from  \'react-common-admin\';\r\n<CommonAdmin\r\n...\r\n\tcollectionProps={{\r\n\t...\r\n\t\tviewComponent:  DraggableTable,\r\n\t\ttableProps: {\r\n\t\t\torderKey:  \'orderKey\' // in this case each document in the DB contain orderKey key with value that help us render the view by a specific order\r\n\t\t// optional\r\n\t\tgroups: [\'related\', \'child\'], // render data in separate tables\r\n\t\tgroupBy: \'relationType\', // key to group value\r\n\t\t\t\r\n\t\t}\r\n...\r\n```\r\n\r\n### customTitle\r\nWhen you init with customTitle you can use it like that:\r\n```\r\nimport { CommonAdmin, customTitle } from  \'react-common-admin\'\r\n\t<CommonAdmin\r\n\t\tschemaName=\'Example\'\r\n\t\ttargetName=\'ExampleScreen\'\r\n\t\ttitle=\'Example Screen\'\r\n\t\tdocumentProps={{\r\n\t\tfields: DocFields, // Define this fields you want to render\r\n\t\tcustomTitle: customTitle,\r\n\t\ttitleKey: \'firstName\',\r\n\t\tinclude: \'imageFromMedia\'\r\n...\r\n}}\r\n```\r\n## special situations\r\n\r\n### Want to create a new document only if he contains a Unique key?\r\nIn this example, we want to enable new document only if there is no another document in this collection with this code\r\n```jsx\r\nimport { fields, util } from  \'react-common-admin\';\r\nexport  const  DocFields  = [\r\n\t{\r\n\t\tkey: \'code\',\r\n\t\tlabel: \'Code\',\r\n\t\t// validators: { presence: true, length: { minimum: 3 } },\r\n\t\tcustomValidation: function (field, value, data, formProps) {\r\n\t\tconst  validators  = { presence: true, length: { minimum: 3 } };\r\n\t\treturn util.validatorsAndIsUnique(validators, \'code\', field, value, data, formProps)\r\n\t\t},\r\n\t\tcomponent: TextInput\r\n\t},\r\n\t{\r\n\t\tkey: \'name\',\r\n\t\tlabel: \'Name\',\r\n\t\tvalidators: { presence: true, length: { minimum: 2 } },\r\n\t\tcomponent: TextInput\r\n\t},\r\n]\r\n```\r\n\r\n### Need to keep another collection updating in each change ?\r\n```jsx\r\n// Option 1\r\n// Sync by react-parse refresh collection\r\n<CommonAdmin\r\n\tschemaName=\'ItemType\'\r\n\ttargetName={\'ItemType-screen\'}\r\n\tkeepSyncByTargetName={[\'ItemType-sideBar\']}\r\n```\r\n// Option 2\r\n// Use on Fetch end callback\r\n```jsx\r\n<CommonAdmin\r\n\tcollectionProps={{\r\n\t\tonFetchEnd: () => { /*do something...*/}\r\n\t}}\r\n```\r\n',
21 silly publish   readmeFilename: 'readme.md',
21 silly publish   gitHead: '79a5448690831d1cea8a771969eb61c7036c338f',
21 silly publish   _id: 'react-common-admin@1.1.0',
21 silly publish   _shasum: '66103a0d9e7af0d8f426c2022a50b84221bd9bc5',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name react-common-admin
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'react-common-admin',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'react-common-admin',
26 silly mapToRegistry   name: 'react-common-admin',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/react-common-admin
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading C:\Users\nahum\AppData\Roaming\npm-cache\react-common-admin\1.1.0\package.tgz
30 verbose request uri https://registry.npmjs.org/react-common-admin
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 8:21:54 PM
33 verbose request using bearer token for auth
34 verbose request id b4ec92289dd46ebf
35 http request PUT https://registry.npmjs.org/react-common-admin
36 http 403 https://registry.npmjs.org/react-common-admin
37 verbose headers { date: 'Sat, 08 Sep 2018 17:21:58 GMT',
37 verbose headers   'content-type': 'application/json',
37 verbose headers   'transfer-encoding': 'chunked',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'set-cookie': [ '__cfduid=d0bbc944725ccbefbd25c8f37b14345b81536427316; expires=Sun, 08-Sep-19 17:21:56 GMT; path=/; domain=.registry.npmjs.org; HttpOnly' ],
37 verbose headers   'cf-ray': '4573181e58242666-FRA',
37 verbose headers   'expect-ct': 'max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"',
37 verbose headers   vary: 'Accept-Encoding',
37 verbose headers   server: 'cloudflare',
37 verbose headers   'content-encoding': 'gzip' }
38 verbose request invalidating C:\Users\nahum\AppData\Roaming\npm-cache\registry.npmjs.org\react-common-admin on PUT
39 error publish Failed PUT 403
40 verbose stack Error: You cannot publish over the previously published versions: 1.1.0. : react-common-admin
40 verbose stack     at makeError (C:\Users\nahum\AppData\Roaming\nvm\v6.14.3\node_modules\npm\node_modules\npm-registry-client\lib\request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (C:\Users\nahum\AppData\Roaming\nvm\v6.14.3\node_modules\npm\node_modules\npm-registry-client\lib\request.js:290:14)
40 verbose stack     at C:\Users\nahum\AppData\Roaming\nvm\v6.14.3\node_modules\npm\node_modules\npm-registry-client\lib\request.js:216:7
40 verbose stack     at Gunzip.onEnd (zlib.js:227:5)
40 verbose stack     at emitNone (events.js:91:20)
40 verbose stack     at Gunzip.emit (events.js:185:7)
40 verbose stack     at endReadableNT (_stream_readable.js:978:12)
40 verbose stack     at _combinedTickCallback (internal/process/next_tick.js:80:11)
40 verbose stack     at process._tickCallback (internal/process/next_tick.js:104:9)
41 verbose statusCode 403
42 verbose pkgid react-common-admin
43 verbose cwd D:\doron\projects\my\react-common-admin
44 error Windows_NT 10.0.17134
45 error argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error node v6.14.3
47 error npm  v3.10.10
48 error code E403
49 error You cannot publish over the previously published versions: 1.1.0. : react-common-admin
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
